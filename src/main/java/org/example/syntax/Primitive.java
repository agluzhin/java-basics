package org.example.syntax;

public class Primitive {
    // Примитивные типы - это специальные типы данных, встроены в язык, не являются объектами классов.
    // Их значения задаются литералами - представление фиксированного значения в исходном коде (не требуют вычислений).

    // byte - 8-битное целое число со знаком (от -128 до 127). Для экономии памяти.
    // По умолчанию равен: 0.
    byte byteType = 1;

    // short - 16-битное целое число со знаком (от -32 768 до 32 767). Для экономии памяти при нехватке byte.
    // По умолчанию равен: 0.
    short shortType = 1;

    // int - 32-битное целое число со знаком (от -2^31 до 2^31 - 1).
    // По умолчанию равен: 0.
    int intType = 1;

    // long - 64-битное целое число со знаком (от -2^63 до 2^63 - 1).
    // По умолчанию равен: 0L.
    long longType = 1L;

    // float - 32-битное число с плавающей точкой одинарной точности. Не использовать в точных значений.
    // По умолчанию равен: 0.0f.
    float floatType = 1.0f;

    // double - 64-битное число с плавающей точкой двойной точности. Менее экономный по памяти чем float.
    // По умолчанию равен: 0.0d.
    double doubleType = 1.0d;

    // boolean - имеет два возможных значения: true или false. Необходим для простых флагов при проверке условий.
    // По умолчанию равен: false.
    boolean booleanType = true;

    // char - 16-битный символ Unicode (от \u0000 или 0 до \uffff или 65535 включительно).
    // По умолчанию равен: \u0000.
    char charType = 'c';

    /*
    Целочисленные литералы могут быть представлены (на примере 26):
        - в десятичной системе, основание 10, цифры от 0 до 9;
            int decimalValue = 26
        - в шестнадцатеричной системе, основание 16, цифры состоят из чисел от 0 до 9 и букв от A до F;
            int hexadecimalValue = 0x1a
        - в двоичной системе, основание 2, цифры состоят из 0 и 1.
            int binaryValue = 0b11010

    В Java есть поддержка нескольких специальных управляющих последовательностей литералов:
        - "\b" для возврата каретки;
        - "\t" для табуляции;
        - "\n" для перевода строки;
        - "\f" для возврата формы;
        - "\r" для возврата каретки;
        - \" \' и \\ для экранирования одних ковычек внутри других.

    В числовых литералах для разделения разрядов с целью повышения читаемости можно использовать "_".
    */
}
